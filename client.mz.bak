# ./client.mjs

The furver client is a powerfull addition to the furver server. It makes it
easy to use the server and bundles requests into a single request when
possible.

> This project contains both a bundled browser friendly version of the client and
> a programmer friendly module. We'll be using the module version in this
> example.

The furver module exports the following functions:

## Import client

```javascript
import {

  // The function which creates a client.
  client,

  // Fetch preset function for fetching the schema from the server.
  schema,

  // A helper to create helpers for bundled requests.
  bulk,

  // Fetch preset functions that can be passed into the client config.
  get,
  post

} from 'furver/client.mjs'
```

## Initialize client

Here is an example of a client that performs get requests instead of the
default post requests.

```javascript
const furverGet = await client({
  endpoint: 'http://localhost:3000',
  fetch: get,
  method: 'post'
})
```

> Using get can enable the use of HTTP caching either in a proxy or a client.
> Caching might cause confusion; it can also enable optimization.

The `get` method should be used when no mutations occur. Using `get` has the
benefits that HTTP GET requests might have in your application/infrastructure.


## Client initialization config

The options object can have the following properties:

|name|type|default|
|---|---|---|
|endpoint|string|http://localhost:3000|
|fetch|(url: string, options: object) => Promise<any>|client.post|
|schema|false\|(endpoint) => Array<[name, arity]>|client.schema|

No function will be set on the client if `schema` is set to `false` and you can
only use the `client.call` method that takes a furver lisp program.

Note that the `fetch`, `schema`, and `method` options can be customized by
passing your own functions or values to the client constructor.

Once you have an instance of the client, you can call methods on it as defined
by the Furver API schema. For example, if the schema has a method called
`getUsers`, you can call it like this:

## Calling server functions

```javascript
const users = await client.getUsers()
```

You can also perform multiple calls that are bundled into a single request. We
can prove this by enabeling the logger and performing multiple function calls.

```javascript DEBUG='furver:client' node 2>&1
Promise.all([
    client.identity('hello'),
    client.identity('silly'),
    client.identity('world')
]).then(console.log)
```

The client also has a `call` method that can be used to call any method on the
API, even if it's not defined in the schema. For example:

```javascript
const result = await client.call(['customMethod', 'arg1', 'arg2', ...rest])
```

This will call the `customMethod` method on the API with the specified arguments.

**What if I want to call the `call` function?** You can:

```javascript
client.call([
  'call',
  'arg1',
  'arg2'
])

// or

client.call([
  ['ref', 'call'], // "ref" has a special meaning in the furver lisp.
  'arg1',
  'arg2'
])

// or

client.call([
  client.call, // Which expands to ['ref', 'call'].
  'arg1',
  'arg2'
])
```

The `client.call` method takes any furver lisp program. These can be as
complicated or simple as your use-case requires.

[Read more about the furver lisp.](./lisp.md)
