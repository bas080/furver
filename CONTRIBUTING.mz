# Contributing

## Dependencies

Lists projects dependencies and the versions.

```bash bash
npm --version  # Dependency management
node --version # Testing and implementation
bash --version | head -n 1 # For usage examples

# Examples on how to use server
curl --version | head -n 1 | cut -f -2 -d ' '
```

Other:

- [markatzea][markatzea]

## Development

First clone the project and then run `npm link`.

```bash bash &> /dev/null
npm ci
npm link
furver --version
```

You should now be able to run the bin scripts and tests.

## Tests

```bash bash
npm t -- -R classic

# or with code coverage
# npx c8 npm t
```

## Audit

Check if package is free of vulnerabilities.

```bash bash
npm audit
```

## Formatting

```bash bash
npx standard
```

## Client Bundle

```bash bash
set -euo pipefail

# Install dependencies without storing them in the package.json
npm install --no-save rollup \
  @rollup/plugin-babel \
  @rollup/plugin-commonjs \
  @rollup/plugin-terser \
  @rollup/plugin-node-resolve

# Uses the .babelrc and the rollup.config.mjs configs
npx rollup -c

git add ./client.min.js
```

## Documentation

```bash bash
set -euo pipefail

# Install dependencies for the examples.
npm install ramda --no-save > /dev/null

# Spawn a server to demonstrate examples.
export PORT=8999
npx furver server ./example/api.mjs&

# Could use pinging instead to wait for the server to start.
sleep 4

for mz in *.mz ;do
  test "$mz" = "CONTRIBUTING.mz" && continue
  name="${mz%.*}"
  md="${name}.md"
  echo "Generating docs for: $mz > $md"
  rm -f "$md"
  markatzea "$mz" | tee "$md" 1>&2
  chmod -w "$md"
done

# Add a TOC
chmod +w README.md
npx markdown-toc -i README.md
chmod -w README.md

# Stop the server
pkill furver
```

## Changelog

The [changelog][changelog] is generated using the useful
[auto-changelog][auto-changelog] project.

```bash bash > /dev/null
npx auto-changelog -p
```

[changelog]:./CHANGELOG.md
[auto-changelog]:https://www.npmjs.com/package/auto-changelog
[markatzea]:https://github.com/bas080/markatzea
